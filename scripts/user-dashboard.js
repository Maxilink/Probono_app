// ===========================================
// PROBONO DESK - USER DASHBOARD
// ===========================================

document.addEventListener('DOMContentLoaded', function() {
    initializeUserDashboard();
    checkAuthentication();
});

// ===========================================
// DASHBOARD INITIALIZATION
// ===========================================

function initializeUserDashboard() {
    initializeSidebar();
    initializeCaseForm();
    initializeMessaging();
    loadDashboardData();
    initializeFilters();
    initializeQuickActions();
}

// ===========================================
// AUTHENTICATION CHECK
// ===========================================

function checkAuthentication() {
    const currentUser = Storage.get('currentUser');
    
    if (!currentUser || currentUser.userType !== 'user') {
        window.location.href = 'auth.html';
        return;
    }
    
    // Update user info in sidebar
    updateUserInfo(currentUser);
}

function updateUserInfo(user) {
    const userNameElements = document.querySelectorAll('.user-name');
    userNameElements.forEach(element => {
        element.textContent = user.name;
    });
}

// ===========================================
// SIDEBAR NAVIGATION
// ===========================================

function initializeSidebar() {
    const navItems = document.querySelectorAll('.nav-item');
    const contentSections = document.querySelectorAll('.content-section');
    const pageTitle = document.getElementById('page-title');
    const sidebarToggle = document.querySelector('.sidebar-toggle');
    const sidebar = document.querySelector('.sidebar');
    
    // Navigation click handlers
    navItems.forEach(item => {
        item.addEventListener('click', function(e) {
            e.preventDefault();\n            \n            const targetSection = this.dataset.section;\n            \n            if (targetSection) {\n                // Update active nav item\n                navItems.forEach(nav => nav.classList.remove('active'));\n                this.classList.add('active');\n                \n                // Show target section\n                contentSections.forEach(section => {\n                    section.classList.remove('active');\n                    if (section.id === targetSection) {\n                        section.classList.add('active');\n                    }\n                });\n                \n                // Update page title\n                const sectionTitles = {\n                    'overview': 'Dashboard Overview',\n                    'submit-case': 'Submit New Case',\n                    'my-cases': 'My Cases',\n                    'law-firms': 'Law Firms',\n                    'messages': 'Messages',\n                    'profile': 'Profile'\n                };\n                \n                if (pageTitle) {\n                    pageTitle.textContent = sectionTitles[targetSection] || 'Dashboard';\n                }\n                \n                // Load section-specific data\n                loadSectionData(targetSection);\n            }\n        });\n    });\n    \n    // Sidebar toggle for mobile\n    if (sidebarToggle && sidebar) {\n        sidebarToggle.addEventListener('click', function() {\n            sidebar.classList.toggle('open');\n        });\n    }\n    \n    // Quick action handlers\n    const quickActionBtns = document.querySelectorAll('.quick-action-btn');\n    quickActionBtns.forEach(btn => {\n        btn.addEventListener('click', function() {\n            const action = this.dataset.action;\n            if (action) {\n                const targetNav = document.querySelector(`[data-section=\"${action}\"]`);\n                if (targetNav) {\n                    targetNav.click();\n                }\n            }\n        });\n    });\n}\n\n// ===========================================\n// CASE FORM FUNCTIONALITY\n// ===========================================\n\nfunction initializeCaseForm() {\n    const caseForm = document.querySelector('.case-form');\n    const formSteps = document.querySelectorAll('.form-step');\n    const nextBtn = document.getElementById('next-step');\n    const prevBtn = document.getElementById('prev-step');\n    const submitBtn = document.getElementById('submit-case');\n    const fileInput = document.getElementById('case-documents');\n    \n    let currentStep = 1;\n    const totalSteps = formSteps.length;\n    \n    // Step navigation\n    if (nextBtn) {\n        nextBtn.addEventListener('click', function() {\n            if (validateCurrentStep(currentStep)) {\n                if (currentStep < totalSteps) {\n                    currentStep++;\n                    updateFormStep();\n                }\n            }\n        });\n    }\n    \n    if (prevBtn) {\n        prevBtn.addEventListener('click', function() {\n            if (currentStep > 1) {\n                currentStep--;\n                updateFormStep();\n            }\n        });\n    }\n    \n    // File upload handling\n    if (fileInput) {\n        fileInput.addEventListener('change', function(e) {\n            handleFileUpload(e.target.files);\n        });\n        \n        // Drag and drop\n        const uploadArea = document.querySelector('.file-upload-area');\n        if (uploadArea) {\n            uploadArea.addEventListener('dragover', function(e) {\n                e.preventDefault();\n                this.classList.add('drag-over');\n            });\n            \n            uploadArea.addEventListener('dragleave', function(e) {\n                e.preventDefault();\n                this.classList.remove('drag-over');\n            });\n            \n            uploadArea.addEventListener('drop', function(e) {\n                e.preventDefault();\n                this.classList.remove('drag-over');\n                handleFileUpload(e.dataTransfer.files);\n            });\n        }\n    }\n    \n    // Form submission\n    if (caseForm) {\n        caseForm.addEventListener('submit', handleCaseSubmission);\n    }\n    \n    function updateFormStep() {\n        // Update form steps visibility\n        formSteps.forEach((step, index) => {\n            if (index + 1 === currentStep) {\n                step.classList.add('active');\n            } else {\n                step.classList.remove('active');\n            }\n        });\n        \n        // Update buttons\n        if (prevBtn) {\n            prevBtn.style.display = currentStep === 1 ? 'none' : 'inline-flex';\n        }\n        \n        if (nextBtn && submitBtn) {\n            if (currentStep === totalSteps) {\n                nextBtn.style.display = 'none';\n                submitBtn.style.display = 'inline-flex';\n                updateCaseSummary();\n            } else {\n                nextBtn.style.display = 'inline-flex';\n                submitBtn.style.display = 'none';\n            }\n        }\n    }\n    \n    function validateCurrentStep(step) {\n        const currentStepElement = document.querySelector(`[data-step=\"${step}\"]`);\n        if (!currentStepElement) return true;\n        \n        const requiredFields = currentStepElement.querySelectorAll('[required]');\n        let isValid = true;\n        \n        requiredFields.forEach(field => {\n            if (!field.value.trim()) {\n                showFieldError(field, 'This field is required');\n                isValid = false;\n            } else {\n                clearFieldError(field);\n            }\n        });\n        \n        // Additional validation for step 1\n        if (step === 1) {\n            const description = document.getElementById('case-description');\n            if (description && description.value.length < 50) {\n                showFieldError(description, 'Please provide a more detailed description (at least 50 characters)');\n                isValid = false;\n            }\n            \n            const urgency = document.querySelector('input[name=\"urgency\"]:checked');\n            if (!urgency) {\n                showNotification('Please select an urgency level', 'warning');\n                isValid = false;\n            }\n        }\n        \n        return isValid;\n    }\n    \n    function updateCaseSummary() {\n        const summaryElements = {\n            'summary-title': document.getElementById('case-title')?.value,\n            'summary-category': document.getElementById('case-category')?.selectedOptions[0]?.text,\n            'summary-state': document.getElementById('case-state')?.selectedOptions[0]?.text,\n            'summary-urgency': document.querySelector('input[name=\"urgency\"]:checked')?.nextElementSibling?.textContent?.trim(),\n            'summary-description': document.getElementById('case-description')?.value\n        };\n        \n        Object.keys(summaryElements).forEach(id => {\n            const element = document.getElementById(id);\n            if (element && summaryElements[id]) {\n                element.textContent = summaryElements[id];\n            }\n        });\n    }\n}\n\nfunction handleFileUpload(files) {\n    const uploadedFilesContainer = document.querySelector('.uploaded-files');\n    if (!uploadedFilesContainer) return;\n    \n    Array.from(files).forEach(file => {\n        if (validateCaseFile(file)) {\n            const fileItem = document.createElement('div');\n            fileItem.className = 'file-item';\n            fileItem.innerHTML = `\n                <div class=\"file-info\">\n                    <i class=\"fas fa-file-${getFileIcon(file.type)}\"></i>\n                    <span>${file.name}</span>\n                    <small>(${formatFileSize(file.size)})</small>\n                </div>\n                <button type=\"button\" class=\"remove-file\" onclick=\"removeFile(this)\">\n                    <i class=\"fas fa-times\"></i>\n                </button>\n            `;\n            uploadedFilesContainer.appendChild(fileItem);\n        }\n    });\n}\n\nfunction validateCaseFile(file) {\n    const maxSize = 10 * 1024 * 1024; // 10MB\n    const allowedTypes = [\n        'application/pdf',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        'image/jpeg',\n        'image/jpg',\n        'image/png'\n    ];\n    \n    if (file.size > maxSize) {\n        showNotification(`File \"${file.name}\" is too large. Maximum size is 10MB.`, 'error');\n        return false;\n    }\n    \n    if (!allowedTypes.includes(file.type)) {\n        showNotification(`File type \"${file.type}\" is not supported.`, 'error');\n        return false;\n    }\n    \n    return true;\n}\n\nfunction getFileIcon(mimeType) {\n    if (mimeType.includes('pdf')) return 'pdf';\n    if (mimeType.includes('word')) return 'word';\n    if (mimeType.includes('image')) return 'image';\n    return 'alt';\n}\n\nfunction formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\nwindow.removeFile = function(button) {\n    button.closest('.file-item').remove();\n};\n\nasync function handleCaseSubmission(e) {\n    e.preventDefault();\n    \n    const formData = new FormData(e.target);\n    const submitBtn = document.getElementById('submit-case');\n    const originalText = submitBtn.innerHTML;\n    \n    try {\n        showLoading(submitBtn);\n        \n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        \n        // Create case object\n        const caseData = {\n            id: 'CASE-' + Date.now(),\n            title: formData.get('title'),\n            category: formData.get('category'),\n            state: formData.get('state'),\n            description: formData.get('description'),\n            urgency: formData.get('urgency'),\n            status: 'submitted',\n            submittedAt: new Date().toISOString(),\n            documents: Array.from(document.querySelectorAll('.file-item')).map(item => {\n                return item.querySelector('.file-info span').textContent;\n            })\n        };\n        \n        // Store case (in real app, this would be sent to server)\n        const userCases = Storage.get('userCases', []);\n        userCases.push(caseData);\n        Storage.set('userCases', userCases);\n        \n        showNotification('Case submitted successfully! You will be notified when law firms respond.', 'success');\n        \n        // Reset form and go to cases section\n        e.target.reset();\n        document.querySelector('.uploaded-files').innerHTML = '';\n        \n        setTimeout(() => {\n            document.querySelector('[data-section=\"my-cases\"]').click();\n        }, 1500);\n        \n    } catch (error) {\n        console.error('Case submission error:', error);\n        showNotification('Failed to submit case. Please try again.', 'error');\n    } finally {\n        hideLoading(submitBtn, originalText);\n    }\n}\n\n// ===========================================\n// MESSAGING FUNCTIONALITY\n// ===========================================\n\nfunction initializeMessaging() {\n    const messageInput = document.querySelector('.message-input');\n    const sendBtn = document.querySelector('.send-btn');\n    const conversationItems = document.querySelectorAll('.conversation-item');\n    \n    // Conversation selection\n    conversationItems.forEach(item => {\n        item.addEventListener('click', function() {\n            conversationItems.forEach(conv => conv.classList.remove('active'));\n            this.classList.add('active');\n            loadConversation(this.dataset.conversationId || 'default');\n        });\n    });\n    \n    // Send message\n    if (sendBtn && messageInput) {\n        sendBtn.addEventListener('click', sendMessage);\n        \n        messageInput.addEventListener('keypress', function(e) {\n            if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                sendMessage();\n            }\n        });\n    }\n    \n    // Attachment handling\n    const attachmentBtn = document.querySelector('.attachment-btn');\n    if (attachmentBtn) {\n        attachmentBtn.addEventListener('click', function() {\n            const fileInput = document.createElement('input');\n            fileInput.type = 'file';\n            fileInput.accept = '.pdf,.doc,.docx,.jpg,.jpeg,.png';\n            fileInput.multiple = true;\n            \n            fileInput.addEventListener('change', function(e) {\n                handleMessageAttachments(e.target.files);\n            });\n            \n            fileInput.click();\n        });\n    }\n}\n\nfunction loadConversation(conversationId) {\n    // In a real app, this would load messages from the server\n    // For demo purposes, we'll show static messages\n    console.log('Loading conversation:', conversationId);\n}\n\nfunction sendMessage() {\n    const messageInput = document.querySelector('.message-input');\n    const chatMessages = document.querySelector('.chat-messages');\n    \n    if (!messageInput || !chatMessages) return;\n    \n    const messageText = messageInput.value.trim();\n    if (!messageText) return;\n    \n    // Create message element\n    const messageElement = document.createElement('div');\n    messageElement.className = 'message sent';\n    messageElement.innerHTML = `\n        <div class=\"message-content\">\n            <p>${messageText}</p>\n            <span class=\"message-time\">${formatTime(new Date())}</span>\n        </div>\n    `;\n    \n    // Add to chat\n    chatMessages.appendChild(messageElement);\n    \n    // Clear input\n    messageInput.value = '';\n    \n    // Scroll to bottom\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n    \n    // Simulate lawyer response (for demo)\n    setTimeout(() => {\n        simulateLawyerResponse();\n    }, 1000 + Math.random() * 2000);\n}\n\nfunction simulateLawyerResponse() {\n    const chatMessages = document.querySelector('.chat-messages');\n    if (!chatMessages) return;\n    \n    const responses = [\n        \"Thank you for your message. I'll review the details and get back to you shortly.\",\n        \"I understand your concern. Let me research this matter and provide you with proper guidance.\",\n        \"That's a great question. Based on the information provided, here's what I recommend...\",\n        \"I'll need to review some additional documents before providing a complete response.\",\n        \"Let me schedule a consultation to discuss this matter in detail.\"\n    ];\n    \n    const response = responses[Math.floor(Math.random() * responses.length)];\n    \n    const messageElement = document.createElement('div');\n    messageElement.className = 'message received';\n    messageElement.innerHTML = `\n        <div class=\"message-content\">\n            <p>${response}</p>\n            <span class=\"message-time\">${formatTime(new Date())}</span>\n        </div>\n    `;\n    \n    chatMessages.appendChild(messageElement);\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n}\n\nfunction handleMessageAttachments(files) {\n    Array.from(files).forEach(file => {\n        if (validateCaseFile(file)) {\n            showNotification(`Attachment \"${file.name}\" added to message.`, 'success');\n        }\n    });\n}\n\n// ===========================================\n// DATA LOADING\n// ===========================================\n\nfunction loadDashboardData() {\n    // Load user's cases\n    const userCases = Storage.get('userCases', []);\n    updateCaseStats(userCases);\n    updateRecentCases(userCases);\n}\n\nfunction loadSectionData(section) {\n    switch (section) {\n        case 'my-cases':\n            loadMyCases();\n            break;\n        case 'law-firms':\n            loadLawFirms();\n            break;\n        case 'messages':\n            loadMessages();\n            break;\n        case 'profile':\n            loadProfile();\n            break;\n    }\n}\n\nfunction updateCaseStats(cases) {\n    const stats = {\n        active: cases.filter(c => ['submitted', 'accepted', 'in-progress'].includes(c.status)).length,\n        completed: cases.filter(c => c.status === 'closed').length,\n        pending: cases.filter(c => c.status === 'submitted').length,\n        messages: 12 // Mock data\n    };\n    \n    // Update stat cards\n    const statCards = document.querySelectorAll('.stat-card');\n    statCards.forEach((card, index) => {\n        const statValue = card.querySelector('h3');\n        if (statValue) {\n            switch (index) {\n                case 0: statValue.textContent = stats.active; break;\n                case 1: statValue.textContent = stats.completed; break;\n                case 2: statValue.textContent = stats.pending; break;\n                case 3: statValue.textContent = stats.messages; break;\n            }\n        }\n    });\n}\n\nfunction updateRecentCases(cases) {\n    const recentCasesContainer = document.querySelector('.dashboard-card .card-content');\n    if (!recentCasesContainer || cases.length === 0) return;\n    \n    const recentCases = cases.slice(-3).reverse();\n    \n    recentCasesContainer.innerHTML = recentCases.map(caseItem => `\n        <div class=\"case-item\">\n            <div class=\"case-info\">\n                <h4>${caseItem.title}</h4>\n                <p>Submitted ${formatDate(caseItem.submittedAt)}</p>\n            </div>\n            <div class=\"case-status status-${caseItem.status}\">\n                ${formatStatus(caseItem.status)}\n            </div>\n        </div>\n    `).join('');\n}\n\nfunction loadMyCases() {\n    const userCases = Storage.get('userCases', []);\n    const casesGrid = document.querySelector('.cases-grid');\n    \n    if (!casesGrid) return;\n    \n    if (userCases.length === 0) {\n        casesGrid.innerHTML = `\n            <div class=\"empty-state\">\n                <i class=\"fas fa-folder-open fa-3x\"></i>\n                <h3>No Cases Yet</h3>\n                <p>You haven't submitted any cases yet. Start by submitting your first case to get free legal help.</p>\n                <button class=\"btn btn-primary\" onclick=\"document.querySelector('[data-section=\\\"submit-case\\\"]').click()\">\n                    Submit Your First Case\n                </button>\n            </div>\n        `;\n        return;\n    }\n    \n    casesGrid.innerHTML = userCases.map(caseItem => `\n        <div class=\"case-card\">\n            <div class=\"case-card-header\">\n                <h3>${caseItem.title}</h3>\n                <div class=\"case-status status-${caseItem.status}\">${formatStatus(caseItem.status)}</div>\n            </div>\n            <div class=\"case-card-content\">\n                <p><strong>Category:</strong> ${formatCategory(caseItem.category)}</p>\n                <p><strong>State:</strong> ${caseItem.state}</p>\n                <p><strong>Assigned Firm:</strong> ${getAssignedFirm(caseItem.status)}</p>\n                <p><strong>Submitted:</strong> ${formatDate(caseItem.submittedAt)}</p>\n                <p><strong>Last Update:</strong> ${getLastUpdate(caseItem.status)}</p>\n            </div>\n            <div class=\"case-card-actions\">\n                <button class=\"btn btn-outline btn-sm\" onclick=\"viewCaseDetails('${caseItem.id}')\">View Details</button>\n                ${caseItem.status !== 'submitted' ? '<button class=\"btn btn-primary btn-sm\">Message Lawyer</button>' : ''}\n            </div>\n        </div>\n    `).join('');\n}\n\nfunction loadLawFirms() {\n    // Mock law firms data\n    const lawFirms = [\n        {\n            name: 'Okafor & Associates',\n            location: 'Lagos, Nigeria',\n            rating: 4.9,\n            reviews: 47,\n            practiceAreas: ['Employment Law', 'Civil Rights', 'Contract Law'],\n            description: 'Experienced law firm specializing in employment disputes and civil rights cases.',\n            stats: { cases: 85, successRate: 95, responseTime: '24h' }\n        },\n        {\n            name: 'LegalAid Pro',\n            location: 'Abuja, Nigeria',\n            rating: 4.6,\n            reviews: 32,\n            practiceAreas: ['Family Law', 'Landlord-Tenant', 'Immigration'],\n            description: 'Dedicated to providing quality legal aid services with a focus on family law.',\n            stats: { cases: 62, successRate: 88, responseTime: '36h' }\n        },\n        {\n            name: 'Justice Partners',\n            location: 'Rivers, Nigeria',\n            rating: 5.0,\n            reviews: 28,\n            practiceAreas: ['Criminal Law', 'Family Law', 'Personal Injury'],\n            description: 'Highly rated firm with expertise in criminal defense and personal injury cases.',\n            stats: { cases: 41, successRate: 92, responseTime: '18h' }\n        }\n    ];\n    \n    const firmsGrid = document.querySelector('.firms-grid');\n    if (!firmsGrid) return;\n    \n    firmsGrid.innerHTML = lawFirms.map(firm => `\n        <div class=\"firm-card\">\n            <div class=\"firm-header\">\n                <div class=\"firm-logo\">\n                    <i class=\"fas fa-building\"></i>\n                </div>\n                <div class=\"firm-info\">\n                    <h3>${firm.name}</h3>\n                    <p>${firm.location}</p>\n                    <div class=\"firm-rating\">\n                        <div class=\"stars\">\n                            ${generateStars(firm.rating)}\n                        </div>\n                        <span>${firm.rating} (${firm.reviews} reviews)</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"firm-content\">\n                <div class=\"practice-areas\">\n                    ${firm.practiceAreas.map(area => `<span class=\"practice-tag\">${area}</span>`).join('')}\n                </div>\n                <p class=\"firm-description\">${firm.description}</p>\n                <div class=\"firm-stats\">\n                    <div class=\"stat\">\n                        <span class=\"stat-number\">${firm.stats.cases}</span>\n                        <span class=\"stat-label\">Cases Handled</span>\n                    </div>\n                    <div class=\"stat\">\n                        <span class=\"stat-number\">${firm.stats.successRate}%</span>\n                        <span class=\"stat-label\">Success Rate</span>\n                    </div>\n                    <div class=\"stat\">\n                        <span class=\"stat-number\">${firm.stats.responseTime}</span>\n                        <span class=\"stat-label\">Avg Response</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"firm-actions\">\n                <button class=\"btn btn-outline btn-sm\">View Profile</button>\n                <button class=\"btn btn-primary btn-sm\">Contact Firm</button>\n            </div>\n        </div>\n    `).join('');\n}\n\nfunction loadMessages() {\n    // Messages are already loaded in the template\n    console.log('Messages section loaded');\n}\n\nfunction loadProfile() {\n    const currentUser = Storage.get('currentUser');\n    if (!currentUser) return;\n    \n    // Populate profile form with user data\n    const profileForm = document.querySelector('.profile-form');\n    if (profileForm) {\n        const nameParts = currentUser.name.split(' ');\n        const firstName = nameParts[0] || '';\n        const lastName = nameParts.slice(1).join(' ') || '';\n        \n        const firstNameField = document.getElementById('profile-firstname');\n        const lastNameField = document.getElementById('profile-lastname');\n        const emailField = document.getElementById('profile-email');\n        \n        if (firstNameField) firstNameField.value = firstName;\n        if (lastNameField) lastNameField.value = lastName;\n        if (emailField) emailField.value = currentUser.email;\n    }\n}\n\n// ===========================================\n// FILTERS AND SEARCH\n// ===========================================\n\nfunction initializeFilters() {\n    const filterSelects = document.querySelectorAll('.filter-select');\n    \n    filterSelects.forEach(select => {\n        select.addEventListener('change', function() {\n            applyFilters();\n        });\n    });\n}\n\nfunction applyFilters() {\n    // Get current section\n    const activeSection = document.querySelector('.content-section.active');\n    if (!activeSection) return;\n    \n    const sectionId = activeSection.id;\n    \n    if (sectionId === 'my-cases') {\n        filterCases();\n    } else if (sectionId === 'law-firms') {\n        filterLawFirms();\n    }\n}\n\nfunction filterCases() {\n    const statusFilter = document.querySelector('.filter-select').value;\n    const caseCards = document.querySelectorAll('.case-card');\n    \n    caseCards.forEach(card => {\n        const status = card.querySelector('.case-status').classList[1].replace('status-', '');\n        \n        if (statusFilter === 'all' || status === statusFilter) {\n            card.style.display = 'block';\n        } else {\n            card.style.display = 'none';\n        }\n    });\n}\n\nfunction filterLawFirms() {\n    const stateFilter = document.querySelectorAll('.filter-select')[0].value;\n    const practiceFilter = document.querySelectorAll('.filter-select')[1].value;\n    const firmCards = document.querySelectorAll('.firm-card');\n    \n    firmCards.forEach(card => {\n        let shouldShow = true;\n        \n        if (stateFilter !== 'all') {\n            const location = card.querySelector('.firm-info p').textContent;\n            if (!location.toLowerCase().includes(stateFilter.toLowerCase())) {\n                shouldShow = false;\n            }\n        }\n        \n        if (practiceFilter !== 'all' && shouldShow) {\n            const practiceAreas = card.querySelectorAll('.practice-tag');\n            const hasMatchingPractice = Array.from(practiceAreas).some(tag => \n                tag.textContent.toLowerCase().includes(practiceFilter.toLowerCase().replace('-', ' '))\n            );\n            if (!hasMatchingPractice) {\n                shouldShow = false;\n            }\n        }\n        \n        card.style.display = shouldShow ? 'block' : 'none';\n    });\n}\n\n// ===========================================\n// QUICK ACTIONS\n// ===========================================\n\nfunction initializeQuickActions() {\n    // Profile form submission\n    const profileForm = document.querySelector('.profile-form');\n    if (profileForm) {\n        profileForm.addEventListener('submit', handleProfileUpdate);\n    }\n}\n\nasync function handleProfileUpdate(e) {\n    e.preventDefault();\n    \n    const formData = new FormData(e.target);\n    const submitBtn = e.target.querySelector('button[type=\"submit\"]');\n    const originalText = submitBtn.innerHTML;\n    \n    try {\n        showLoading(submitBtn);\n        \n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // Update stored user data\n        const currentUser = Storage.get('currentUser');\n        if (currentUser) {\n            currentUser.name = `${formData.get('firstName')} ${formData.get('lastName')}`;\n            currentUser.email = formData.get('email');\n            Storage.set('currentUser', currentUser);\n            \n            // Update UI\n            updateUserInfo(currentUser);\n        }\n        \n        showNotification('Profile updated successfully!', 'success');\n        \n    } catch (error) {\n        console.error('Profile update error:', error);\n        showNotification('Failed to update profile. Please try again.', 'error');\n    } finally {\n        hideLoading(submitBtn, originalText);\n    }\n}\n\n// ===========================================\n// UTILITY FUNCTIONS\n// ===========================================\n\nfunction formatStatus(status) {\n    const statusMap = {\n        'submitted': 'Submitted',\n        'accepted': 'Accepted',\n        'in-progress': 'In Progress',\n        'closed': 'Closed',\n        'declined': 'Declined'\n    };\n    return statusMap[status] || status;\n}\n\nfunction formatCategory(category) {\n    return category.split('-').map(word => \n        word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n}\n\nfunction getAssignedFirm(status) {\n    if (status === 'submitted') return 'Pending';\n    \n    const firms = ['Okafor & Associates', 'LegalAid Pro', 'Justice Partners'];\n    return firms[Math.floor(Math.random() * firms.length)];\n}\n\nfunction getLastUpdate(status) {\n    const updates = {\n        'submitted': 'Awaiting law firm response',\n        'accepted': 'Case accepted, initial consultation scheduled',\n        'in-progress': 'Case review in progress, lawyer assigned',\n        'closed': 'Case successfully resolved',\n        'declined': 'Case declined by law firm'\n    };\n    return updates[status] || 'No updates';\n}\n\nfunction generateStars(rating) {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n    let starsHTML = '';\n    \n    for (let i = 0; i < fullStars; i++) {\n        starsHTML += '<i class=\"fas fa-star\"></i>';\n    }\n    \n    if (hasHalfStar) {\n        starsHTML += '<i class=\"fas fa-star-half-alt\"></i>';\n    }\n    \n    const emptyStars = 5 - Math.ceil(rating);\n    for (let i = 0; i < emptyStars; i++) {\n        starsHTML += '<i class=\"far fa-star\"></i>';\n    }\n    \n    return starsHTML;\n}\n\nwindow.viewCaseDetails = function(caseId) {\n    const userCases = Storage.get('userCases', []);\n    const caseData = userCases.find(c => c.id === caseId);\n    \n    if (caseData) {\n        // Create modal or detailed view\n        showNotification(`Viewing details for case: ${caseData.title}`, 'info');\n    }\n};\n\n// ===========================================\n// ERROR HANDLING\n// ===========================================\n\nfunction showFieldError(field, message) {\n    clearFieldError(field);\n    \n    field.style.borderColor = '#ef4444';\n    field.style.backgroundColor = '#fef2f2';\n    \n    const errorElement = document.createElement('div');\n    errorElement.className = 'field-error';\n    errorElement.textContent = message;\n    errorElement.style.color = '#ef4444';\n    errorElement.style.fontSize = '0.875rem';\n    errorElement.style.marginTop = '0.25rem';\n    \n    field.parentNode.appendChild(errorElement);\n}\n\nfunction clearFieldError(field) {\n    field.style.borderColor = '';\n    field.style.backgroundColor = '';\n    \n    const existingError = field.parentNode.querySelector('.field-error');\n    if (existingError) {\n        existingError.remove();\n    }\n}\n\n// Initialize dashboard on load\nwindow.addEventListener('load', function() {\n    loadDashboardData();\n});